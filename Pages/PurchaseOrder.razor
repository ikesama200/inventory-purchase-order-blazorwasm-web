
@page "/purchase-order"
@inject HttpClient Http

<!-- <h3>発注書入力</h3> -->
<h3>入力情報テスト</h3>

<!-- 1行テキストボックス -->
<div class="mb-2">
    <label>名前: </label>
    <InputText @bind-Value="name" class="form-control" />
</div>

<!-- ボタン -->
<div class="mb-2">
    <button class="btn btn-primary" @onclick="SubmitLocal">送信</button>
    <span class="ms-2">@message</span>
</div>

<!-- ドロップダウン（select） -->
<div class="mb-2">
    <label>在庫ステータス: </label>
    <select class="form-select" @bind="selectedStatus">
        @foreach (var s in StatusOptions)
        {
            <option value="@s">@s</option>
        }
    </select>
    <div class="small text-muted">選択中: @selectedStatus</div>
</div>

<!-- コンボボックス風（入力＋候補: datalist を使用） -->
<div class="mb-2">
    <label>商品名（候補から選択可）: </label>
    <input class="form-control" list="productList" @bind="productName" />
    <datalist id="productList">
        @foreach (var p in ProductCandidates)
        {
            <option value="@p"></option>
        }
    </datalist>
    <div class="small text-muted">入力値: @productName</div>
</div>

<!-- 送信用ボタン -->
<div class="mb-2">
    <button class="btn btn-primary" @onclick="Submit">送信</button>
</div>

<div>
    <strong>サーバー応答:</strong> @responseMessage
</div>

@code {

    public class InventoryRequest
    {
        public string? Name { get; set; }
        public string? Status { get; set; }
        public string? ProductName { get; set; }
    }

    // 1行テキストボックス用
    private string name = string.Empty;

    // ボタン押下時のメッセージ
    private string message = string.Empty;

    private string responseMessage = "";

    // ドロップダウン用
    private string selectedStatus = "在庫あり";
    private readonly string[] StatusOptions =
        new[] { "在庫あり", "在庫僅少", "在庫なし", "入荷予定" };

    // コンボボックス（datalist）用
    private string productName = string.Empty;
    private readonly string[] ProductCandidates =
        new[] { "りんご", "みかん", "バナナ", "ぶどう", "メロン" };

    private void SubmitLocal()
    {
        message = $"[{name}] / 状態: {selectedStatus} / 商品: {productName}";
    }

    private async Task Submit()
    {
        // 入力値をモデルにまとめる
        var request = new InventoryRequest
        {
            Name = name,
            Status = selectedStatus,
            ProductName = productName
        };

        try
        {
            // WebAPIにPOSTする
            <!-- 
            var response = await Http.PostAsJsonAsync("https://192.168.2.220/hello", request);

            if (response.IsSuccessStatusCode)
            {
                // レスポンスを文字列として取得
                responseMessage = await response.Content.ReadAsStringAsync();
            }
            else
            {
                responseMessage = $"エラー: {response.StatusCode}";
            }
            -->
        }
        catch (Exception ex)
        {
            responseMessage = $"通信エラー: {ex.Message}";
        }
    }
}
